{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Templates for isucon3 honsen with SpotInstance",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String",
      "MinLength": "1",
      "ConstraintDescription": "must be a valid KeyPair."
    },
    "InstanceType": {
      "Description": "Server EC2 instance type",
      "Type": "String",
      "Default": "m3.xlarge",
      "AllowedValues": ["t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hs1.8xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SpotPrice": {
      "Description": "The maximum price you are willing to pay per instance hour. Your instance runs when your bid price is greater than the Spot Price.",
      "Type": "Number",
      "Default": "0.405",
      "MinValue": "0"
    },
    "AvailabilityZones": {
      "Description": "Availability Zones List",
      "Type": "CommaDelimitedList",
      "Default": "ap-northeast-1a, ap-northeast-1b, ap-northeast-1c",
      "ConstraintDescription": "must be a valid Availability Zones."
    },
    "AllowedLocation": {
      "Description": "The IP address range that can be used to access to the EC2 instance",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "AWSRegionArch2AMI": {
      "ap-northeast-1": { "64HVM": "ami-25046324" }
    }
  },

  "Resources": {

    "SpotInstance": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
            "AvailabilityZones": { "Ref": "AvailabilityZones" },
            "LaunchConfigurationName": { "Ref": "LaunchConfig" },
            "MinSize": 1,
            "MaxSize": 1,
            "DesiredCapacity": 1,
            "Tags": [ {
              "Key": "Name",
              "Value": { "Ref": "AWS::StackName" },
              "PropagateAtLaunch": "true"
            } ]
        }
    },

    "LaunchConfig": {
        "Type": "AWS::AutoScaling::LaunchConfiguration",
        "Properties": {
            "SpotPrice": { "Ref": "SpotPrice" },
            "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64HVM" ] },
            "SecurityGroups": [ { "Ref": "InstanceSecurityGroup" } ],
            "InstanceType": { "Ref": "InstanceType" },
            "KeyName": {  "Ref": "KeyName"  },
            "UserData": {
                "Fn::Base64": {
                    "Fn::Join": [ "", [ "#!/bin/bash\n",
                                        "su - isucon -lc 'cd isucon3/final/bench && ./prepare-images.sh && ./init.sh'\n",
                                        "PublicHostname=`curl -s http://169.254.169.254/latest/meta-data/public-hostname`\n",
                                        "/opt/aws/bin/cfn-signal -d $PublicHostname -e $? '", { "Ref": "WaitHandle" }, "'\n"
                        ]
                    ]
                }
            }

        }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "EC2 Instance access",
        "SecurityGroupIngress": [ 
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "AllowedLocation"} },
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": { "Ref": "AllowedLocation"} }
        ]
      }
    },

    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "SpotInstance",
      "Properties": {
        "Handle": { "Ref": "WaitHandle" },
        "Timeout": "900"
      }
    }
  },

  "Outputs": {
    "PublicDNS": {
      "Description": "Public DNS",
      "Value": { "Fn::GetAtt": [ "WaitCondition", "Data" ] }
    }
  }
}
